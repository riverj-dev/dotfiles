#
#            ████████╗██╗ ██████╗ ██████╗  ██████╗
#            ╚══██╔══╝██║██╔════╝ ██╔══██╗██╔════╝
#               ██║   ██║██║  ███╗██████╔╝██║     
#               ██║   ██║██║   ██║██╔══██╗██║     
#               ██║   ██║╚██████╔╝██║  ██║╚██████╗
#               ╚═╝   ╚═╝ ╚═════╝ ╚═╝  ╚═╝ ╚═════╝
#

# main view の左端にコミットIDを表示する
set main-view   = id date author:email-user commit-title:graph=yes,refs=yes

# blame view の行数表示をON、intervalを1に
set blame-view  = date:default author:email-user id:yes,color line-number:yes,interval=1 text

# Pager系の行数表示をON、intervalを1に (default: line-number:no,interval=5)
set pager-view  = line-number:yes,interval=1 text
set stage-view  = line-number:yes,interval=1 text
set log-view    = line-number:yes,interval=1 text
set blob-view   = line-number:yes,interval=1 text
set diff-view   = line-number:yes,interval=1 text:yes,commit-title-overflow=no

# Visualization
set id-width = 8
set blame-options = -C -C -C
set horizontal-scroll = 33%
set show-notes = yes
set show-changes = yes
set split-view-height = 80%
set status-show-untracked-dirs = yes

set tab-size = 4
set diff-context = 3
set ignore-space = some
set commit-order = topo
set ignore-case = yes
set wrap-lines = yes
set focus-child = yes
set refresh-mode = auto

# -----------------------------------------------------------------------------
# Bind Settings
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# 移動
# -----------------------------------------------------------------------------
bind generic <C-f>  move-page-down
bind generic <C-b>  move-page-up
bind generic g      move-first-line
bind generic G      move-last-line
bind generic E      view-grep
bind main    G      move-last-line

bind diff    j      :/^@@
bind diff    k      :?^@@
bind diff    <Esc>j  :/^diff --(git|cc)
bind diff    <Esc>k  :?^diff --(git|cc)
bind stage   j      :/^@@
bind stage   k      :?^@@
bind stage   <Esc>j  :/^diff --(git|cc)
bind stage   <Esc>k  :?^diff --(git|cc)
bind pager   j      :/^@@
bind pager   k      :?^@@
bind pager   <Esc>j  :/^diff --(git|cc)
bind pager   <Esc>k  :?^diff --(git|cc)
bind log     j      :/^commit
bind log     k      :?^commit

# -----------------------------------------------------------------------------
# fetch
# -----------------------------------------------------------------------------
# F で fetch (default: :toggle file-name / :toggle commit-title-refs)
bind generic F      ?git fetch %(remote)
bind main    F      ?git fetch %(remote)

# Alt-f で :toggle file-name / :toggle commit-title-refs
bind generic <Esc>f :toggle file-name
bind main    <Esc>f :toggle commit-title-refs

# -----------------------------------------------------------------------------
# pull
# -----------------------------------------------------------------------------
# U で pull
bind generic U      ?git pull %(remote)

# Alt-u で該当ブランチを更新
bind main    <Esc>u ?sh -c "git checkout %(branch) && git pull %(remote) --ff-only && git checkout -"
bind diff    <Esc>u ?sh -c "git checkout %(branch) && git pull %(remote) --ff-only && git checkout -"
bind refs    <Esc>u ?sh -c "git checkout %(branch) && git pull %(remote) --ff-only && git checkout -"

# -----------------------------------------------------------------------------
# push
# -----------------------------------------------------------------------------
# P で remote への push
bind generic P      ?git push -u %(remote) %(repo:head)

# -----------------------------------------------------------------------------
# commit
# -----------------------------------------------------------------------------
# C で commit (refs での C は checkout, main での C は cherry-pick だが上書きする)
bind generic C      !git commit
bind refs    C      !git commit
bind main    C      !git commit

# Alt-c で commit --allow-empty
bind generic <Esc>c !git commit --allow-empty

# + で commit --amend
bind generic +      !git commit --amend --allow-empty

# -----------------------------------------------------------------------------
# reflog
# -----------------------------------------------------------------------------
# L で reflog
bind generic L      !sh -c "git reflog --pretty=raw | tig --pretty=raw"

# _ で指定 reflog 番号にリセット
bind generic _      ?git reset --hard HEAD@{"%(prompt Enter HEAD@{} number: )"}

# ^ で reset --soft
bind generic ^      ?git reset --soft HEAD^

# -----------------------------------------------------------------------------
# diff
# -----------------------------------------------------------------------------
# . で HEAD との diff
bind main    .      !sh -c "git diff %(commit) | tig"
bind diff    .      !sh -c "git diff %(commit) | tig"
bind refs    .      !sh -c "git diff %(branch) | tig"

# Alt-. で指定 commit ID との diff
bind main    <Esc>. ?sh -c "git diff %(commit)..%(prompt git Diff Enter commit ID: ) | tig"
bind diff    <Esc>. ?sh -c "git diff %(commit)..%(prompt git Diff Enter commit ID: ) | tig"
bind refs    <Esc>. ?sh -c "git diff %(branch)..%(prompt git Diff Enter branch name: ) | tig"

# ~ で親コミットに移動 (default: :toggle line-graphics)
bind generic ~      :goto %(commit)^

# Alt-~ で表示のトグル (default: ~)
bind generic <Right> :toggle line-graphics

# -----------------------------------------------------------------------------
# stash
# -----------------------------------------------------------------------------
# S で stash save
bind generic S      ?git stash save "%(prompt Enter stash comment: )"

# Y で stash pop
bind diff    Y      ?git stash pop %(stash)
bind stash   Y      ?git stash pop %(stash)

# Alt-y で stash apply
bind diff    <Esc>y ?git stash apply %(stash)
bind stash   <Esc>y ?git stash apply %(stash)

# -----------------------------------------------------------------------------
# git reset --hard
# -----------------------------------------------------------------------------
# H で reset --hard
bind main    H      ?git reset --hard %(commit)
bind diff    H      ?git reset --hard %(commit)
bind refs    H      ?git reset --hard %(branch)

# H で reset --hard HEAD (status-view)
bind status  H      ?git reset --hard HEAD

# -----------------------------------------------------------------------------
# 削除
# -----------------------------------------------------------------------------
# D でブランチを削除 (マージ済みブランチのみ. 強制削除(branch -D) は `!`) (refs-view)
bind refs    D      ?git branch -d %(branch)

# D でトラッキングされていないファイルを削除 (status-view)
bind status  D      ?git clean -d -f -- %(file)

# D で stash を削除 (`!` と同じ) (stash-view)
bind stash   D      ?git stash drop %(stash)

# D でファイルを削除 (tree-view)
bind tree    D      ?git rm %(file)

# x でトラッキングされていないファイルをすべて削除
bind main    x      ?git clean -d -f
bind status  x      ?git clean -d -f

# x でマージ済みローカルブランチをすべて削除 (master/develop 除く)
bind refs    x      ?sh -c "git branch --merged | grep -vE '^\\*|master$|develop$' | xargs -I % git branch -d %"

# -----------------------------------------------------------------------------
# commit ID コピー
# -----------------------------------------------------------------------------
# Ctrl-x で commit ID をクリップボードにコピー 
bind generic <C-x>      @bash -c "echo -n '%(commit)' | xsel -bi"

# Ctrl-x でファイルパスをクリップボードにコピー
bind stage   <C-x>      @bash -c "echo -n '%(file)' | xsel -bi"
bind status  <C-x>      @bash -c "echo -n '%(file)' | xsel -bi"
bind tree    <C-x>      @bash -c "echo -n '%(file)' | xsel -bi"
bind blob    <C-x>      @bash -c "echo -n '%(file)' | xsel -bi"

# -----------------------------------------------------------------------------
# cherry pick
# -----------------------------------------------------------------------------
# K で cherry-pick (default: 'C')
bind main    K      ?git cherry-pick %(commit)
bind diff    K      ?git cherry-pick %(commit)

# Alt-k で cherry-pick -n (--no-commit)
bind main    <Esc>k ?git cherry-pick -n %(commit)
bind diff    <Esc>k ?git cherry-pick -n %(commit)

# -----------------------------------------------------------------------------
# checkout
# -----------------------------------------------------------------------------
## 以下、Shift付きでブランチ指定、Alt付きでコミットID指定のコマンド

# = で checkout
bind main    =      ?git checkout %(branch)
bind refs    =      ?git checkout %(branch)
bind main    <Esc>= ?git checkout %(commit)

# - で直前のブランチに戻る (checkout -)
bind generic -      ?git checkout -

# -----------------------------------------------------------------------------
# merge/rebase
# -----------------------------------------------------------------------------
# M で merge
bind main    M      ?git merge %(branch)
bind diff    M      ?git merge %(branch)
bind refs    M      ?git merge %(branch)
bind main    <Esc>m ?git merge %(commit)
bind diff    <Esc>m ?git merge %(commit)

# R で rebase
bind main    R      ?git rebase %(branch)
bind diff    R      ?git rebase %(branch)
bind refs    R      ?git rebase %(branch)
bind main    <Esc>r ?git rebase %(commit)
bind diff    <Esc>r ?git rebase %(commit)

# I で rebase -i
bind main    I      ?git rebase -i %(branch)
bind diff    I      ?git rebase -i %(branch)
bind refs    I      ?git rebase -i %(branch)
bind main    <Esc>i ?git rebase -i %(commit)
bind diff    <Esc>i ?git rebase -i %(commit)

